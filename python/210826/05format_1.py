
'''
    < format함수 >

- format함수를 이용 인수의 순서대로 블럭{}에 대응. 서식문자를 그대로 사용 가능하지만 앞서 %서식과는
  약간의 차이가 있고 이는 f블럭{} 서식 지정 방법과 동일.

형식 : { 대응 인덱스 또는 실인수변수 : 서식문자 }

- 대응 인덱스 또는 실인수변수 : 생략 가능하지만 다중 블럭{}에 format함수의 실인수 변수가 여러개 대응될 때에는 모두
                              생략하던지 또는 모두 대응시켜야 함에 주의.    단, 인덱스와 실인수 변수는 혼용이 가능
                              하되 인덱스를 적용하는 부분에 대한 format함수의 실인수 변수의 디폴트값 할당은 불가.
                              또한 블럭{} 내에 실인수 변수를 적용하는 경우에는 반드시 format함수의 실인수 변수는
                              디폴트 값이 할당되어야 함에 주의.   이는 외부에 값이 할당된 동일 명칭의 전역 변수가
                              선언되어 있더라도 그 값을 format함수의 실인수 변수에 대응시키지는 못함을 의미.

- 서식문자 : f블럭{} 서식과 사용 방법이 동일하되, 앞서 %서식과는 차이가 있고 % 지정자가 붙지 않음에 주의.

'''

name = '박성연'
age = 25

print('나의 이름은 {}입니다'.format(name))
print('나의 이름은 {}이고 {}살입니다.'.format(name, age))
print('나의 이름은 {}이고 {:3d}살입니다.'.format(name, age))


print('나는 {0}와 {1}를 좋아합니다.'.format('딸기', '바나나'))  # format함수의 인수를 인덱싱하여 블럭{} 내에
print('나는 {1}와 {0}를 좋아합니다.'.format('딸기', '바나나'))  # 인덱스를 지정하여 대응.


# format함수의 실인수 변수에 디폴트 할당값을 직접 지정하고 블럭{} 내의 실인수 변수에 대응.    블럭{} 내 실인수
# 변수를 적용하는 경우에는 format함수의 실인수 변수에는 반드시 디폴트 값이 할당되어야 함에 주의.
print('나는 {language1}과 {language2}를 공부합니다'.format(language1='파이썬', language2='자바'))