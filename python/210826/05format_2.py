""" 
    < 블럭{} 서식 지정 >

형식    :   { 표현식 : [빈 필드를 채울 문자] [정렬형식(<,>,^)] [문자열 서식] }

- 표현식이란 대입 할당문의 우변에 지정 가능한 것을 의미.

"""
pi = 3.141592
num = 12345

print(f'파이는 {pi}다')
print(f'파이는 {pi:.2f}다')     # 콜론(:) 기준 우변에 %를 뺀 기존 문자열 서식 그대로 지정 가능.(단, 정렬은 제외)
print(f'파이는 {pi:5.2F}다')    # 서식문자 f, d등을 생략하면 디폴트로 정수(d) 출력 서식으로 인식.
print(f'파이는 {pi:5.0F}다')    # 앞서 % 서식에서는 f서식 지정시 소숫점 첫째 자리에서 반올림하여 정수부만 표시할 때

print(f'{num:<10d}')    # < : 왼쪽 정렬. 정렬문자 생략 시 문자열은 왼쪽, 숫자 타입은 오른쪽이 디폴트 정렬.
print(f'{num:>10d}')    # > : 오른쪽 정렬.
print(f'{num:^10d}')    # ^ : 가운데 정렬.

print(f'{num:@<10d}')   # 정렬 문자 왼쪽에 빈 필드를 채울 문자 지정.(생략시 공백으로 디폴트 지정)
print(f'{num:@>10d}')
print(f'{num:@^10d}')

print(f'{num:<+10d}')   # 양수인 경우 부호 +를 삽입하고자 하는 경우 서식문자 앞에 +부호 삽입.
print(f'{num:>+10d}')   # 음수의 경우 값의 평가에 따라 자동으로 삽입되므로 별도의 서식 지원은 없음.
print(f'{num:^+10d}')

print(f'{num:<+,d}')   # 천단위 구분기호 : 필드크기와 서식문자 사이에 콤마(,) 지정.
print(f'{num:>+10,d}')  # 단, 천단위 구분기호는 부호보다는 뒤에 지정되야 함에 주의.
print(f'{num:^+10,d}')

print(f'블럭 표현식 =>  {{표현식 : 서식}}')     # { 또는 } 블럭 문자 표현시 {{ 또는 }} 처럼 중첩 표현.

lineBreak = '\n'
# print(f'블럭 표현식 내의 backslash문자("\\") 금지{"\n"}')   # f-string 내의 블럭{} 표현식 내에서는 backslash('\n')
print(f'블럭 표현식 내의 backslash문자("\\") 금지{lineBreak}')  # 문자의 사용이 불가. 따라서 개행문자와 같은 이스케이프
#                                                              # 문자를 표현하려면 변수에 이스케이프 문자를 저장 후
print('-' * 40)                                                # 블럭{} 표현식 내에서 변수를 표현하여야만 가능.